{{template "head.tmpl" .}}
<div class="content" style="overflow: auto; height: 900px;">
  <div class="container-fluid">
    <h2 align="center">睿阳视频监控解析平台</h2>
    <h2 id="一-概述">一. 概述</h2>
    <p>睿阳视频监控解析平台基于开源项目 <a href="https://github.com/deepch/RTSPtoWeb">RTSPtoWeb</a>，进行二次研发。平台用于将您的 RTSP 流转换为可在 Web 浏览器中使用的格式，
    例如：MSE、WebRTC 或 HLS。 它是完全原生的 Golang，无需使用 FFmpeg 或 GStreamer！</p>
    <h2 id="二-使用说明">二. 使用说明</h2>
    <h3 id="1-下载平台">1. 下载平台</h3>
    <p>睿阳视频监控解析平台已上传SVN，地址：<code>svn://116.176.33.76:8443/videomonitor</code>。目录结构如下：</p>
    <pre><code class="language-shell">├── config.json                   ## 配置文件
    ├── config.json.example.json      ## 配置样例
    ├── examples                      ## 页面集成样例
    │   ├── hls                       ## hls 集成样例
    │   ├── hlsll                     ## hlsll 集成样例
    │   ├── mse                       ## mse 集成样例
    │   └── webrtc                    ## webrtc 集成样例
    ├── run                           ## Linux 可执行文件
    ├── run.exe                       ## Windows 可执行文件
    ├── runMAC                        ## MacOS 可执行文件
    └── web                           ## 平台控制台页面
        ├── static
        └── templates
    </code></pre>
    <h3 id="2-配置并运行">2. 配置并运行</h3>
    <pre><code class="language-json">{
      &quot;channel_defaults&quot;: {},
      &quot;server&quot;: {
        &quot;debug&quot;: true,
        &quot;http_debug&quot;: false,
        &quot;http_demo&quot;: true,
        &quot;http_dir&quot;: &quot;&quot;,
        &quot;http_login&quot;: &quot;user&quot;,
        &quot;http_password&quot;: &quot;userpassword&quot;,
        &quot;http_port&quot;: &quot;:8083&quot;,
        &quot;https&quot;: false,
        &quot;https_auto_tls&quot;: false,
        &quot;https_auto_tls_name&quot;: &quot;&quot;,
        &quot;https_cert&quot;: &quot;&quot;,
        &quot;https_key&quot;: &quot;&quot;,
        &quot;https_port&quot;: &quot;&quot;,
        &quot;ice_credential&quot;: &quot;&quot;,
        &quot;ice_servers&quot;: [
          &quot;stun:stun.l.google.com:19302&quot;
        ],
        &quot;ice_username&quot;: &quot;&quot;,
        &quot;log_level&quot;: &quot;info&quot;,
        &quot;rtsp_port&quot;: &quot;:5541&quot;,
        &quot;token&quot;: {
          &quot;backend&quot;: &quot;&quot;,
          &quot;enable&quot;: false
        },
        &quot;webrtc_port_max&quot;: 0,
        &quot;webrtc_port_min&quot;: 0
      },
      &quot;streams&quot;: {
        &quot;test&quot;: {
          &quot;channels&quot;: {
            &quot;0&quot;: {
              &quot;name&quot;: &quot;摄像头1&quot;,
              &quot;on_demand&quot;: true,
              &quot;url&quot;: &quot;rtsp://admin:risun8768@192.168.1.249:554/Streaming/Channels/101&quot;
            }
          },
          &quot;name&quot;: &quot;测试&quot;
        }
      }
    }
    </code></pre>
    <ul>
    <li><p>配置说明</p>
    <p>使用时只可修改下面的配置，其他的配置不要进行修改</p>
    <ul>
    <li><strong>Server 配置</strong></li>
    </ul>
    <table>
    <thead>
    <tr>
    <th>配置项</th>
    <th>配置值</th>
    <th>说明</th>
    </tr>
    </thead>
    <tbody><tr>
    <td>debug</td>
    <td>true (false)，默认：true</td>
    <td>启用调试输出</td>
    </tr>
    <tr>
    <td>log_level</td>
    <td>trace, debug, info, warning, error, fatal, or panic，默认：info</td>
    <td>日志级别</td>
    </tr>
    <tr>
    <td>http_login</td>
    <td></td>
    <td>认证用户名</td>
    </tr>
    <tr>
    <td>http_password</td>
    <td></td>
    <td>认证密码</td>
    </tr>
    <tr>
    <td>http_port</td>
    <td>默认:8083（注意，要带:，例如:8000）</td>
    <td>HTTP端口</td>
    </tr>
    <tr>
    <td>webrtc_port_min</td>
    <td>默认0，Linux环境可设置为 60000</td>
    <td>WebRTC使用的最小端口（UDP）</td>
    </tr>
    <tr>
    <td>webrtc_port_max</td>
    <td>默认0，Linux环境可设置为 61000</td>
    <td>WebRTC使用的最大端口（UDP）</td>
    </tr>
    </tbody></table>
    <p><strong>注意：</strong> 修改<code>http_login</code>或<code>http_password</code>后，要同步修改<code>index.js</code>(位于<code>web/static/js/index.js</code>)</p>
    <pre><code class="language-javascript">// 替换
    xhr.setRequestHeader(&quot;Authorization&quot;, &quot;Basic &quot; + btoa(&quot;&lt;原始用户名&gt;:&lt;原始密码&gt;&quot;));
    // 为
    xhr.setRequestHeader(&quot;Authorization&quot;, &quot;Basic &quot; + btoa(&quot;&lt;新用户名&gt;:&lt;新密码&gt;&quot;));
    </code></pre>
    <ul>
    <li><strong>Stream 配置</strong></li>
    </ul>
    <p>服务启动可不配置<code>streams</code>，通过平台控制台进行添加。对示例配置进行说明</p>
    <pre><code class="language-properties">test：视频流解析标识（重要）
    0：   视频流通道标识（重要，按顺序配置0、1、2、3、4）
    url： RTSP地址
    </code></pre>
    </li>
    <li><p>运行方式</p>
    <ul>
    <li>Windows：双击<code>run.exe</code></li>
    <li>Linux：<code>./run</code></li>
    <li>MacOS：<code>./runMac</code></li>
    </ul>
    <p>运行后，打开浏览器，输入地址：<code>http://&lt;ip&gt;:&lt;port&gt;</code>（本地启动的地址默认是：<a href="http://localhost:8083%EF%BC%89">http://localhost:8083）</a></p>
    </li>
    </ul>
    <h3 id="3-集成web页面">3. 集成Web页面</h3>
    <p>平台已经提供了集成Web页面的示例，详情请查看<code>examples</code>目录下的文件。</p>
    <h3 id="4-限制">4. 限制</h3>
    <p>支持的视频编解码器： 所有<code>H264</code>配置（不支持<code>H265</code>）</p>
    <p>支持的音频编解码器：否</p>
    <h2 id="三-最佳实践">三. 最佳实践</h2>
    <table>
    <thead>
    <tr>
    <th>采用技术</th>
    <th>延迟</th>
    <th>监控路数</th>
    </tr>
    </thead>
    <tbody><tr>
    <td>WebRTC</td>
    <td>&lt; 1s</td>
    <td>不限</td>
    </tr>
    <tr>
    <td>MSE</td>
    <td>1s 左右</td>
    <td>&lt; 6路</td>
    </tr>
    <tr>
    <td>LL-HLS</td>
    <td>2～3s</td>
    <td>不限</td>
    </tr>
    <tr>
    <td>HLS</td>
    <td>&gt; 20s</td>
    <td>不限</td>
    </tr>
    </tbody></table>
    <h2 id="四-技术原理">四. 技术原理</h2>
    <h3 id="1-视频监控">1. 视频监控</h3>
    <p>监控系统中摄像头的作用是将所采集的图像数据进行编码，而硬盘录像机的作用就是对摄像头编码的数据进行解码，然后输出到显示器，这样就能看到完整
    和清晰的监控图像。</p>
    <ul>
    <li>监控路数：视频监控系统里面的路数指的是你安装了多少摄像头（硬盘录像机），一般规格有4路、8路、16路和32路四种规格。</li>
    <li>IPC：IP Camera，网络摄像头的意思</li>
    </ul>
    <h3 id="2-hls和ll-hls">2. HLS和LL-HLS</h3>
    <p><strong>HLS</strong></p>
    <blockquote>
    <p>HLS（HTTP Live Streaming）协议是由苹果提出的基于流媒体的网络传输协议。通过将整条流切割成一个个小的可以通过 HTTP 下载的媒体文件，然后提供一个配套的媒体列表文件，
    提供给客户端，让客户端顺序地拉取这些媒体文件播放，来实现看上去是在播放一条流的效果。由于传输层协议只需要标准的 HTTP 协议，HLS 可以方便的透过防火墙或者代理服务器，而且可以很方便的利用 CDN 进行分发加速，并且客户端实现起来也很方便。</p>
    <p>HLS 把整个流分成一个个小的基于 HTTP 的文件来下载，每次只下载一些。HLS 协议由三部分组成：HTTP、M3U8、TS。这三部分中，HTTP 是传输协议，M3U8 是索引文件，TS 是音视频的媒体信息。</p>
    <p>HLS的延迟：HLS的一个分片大概5-10s,一般加载3个分片播放。所以延迟大概15-30s。</p>
    </blockquote>
    <p><strong>LL-HLS</strong></p>
    <blockquote>
    <p>Low-Latency HLS。相比较于HLS，延迟更低，官方说明，最低延迟在3s左右。</p>
    <p>更小的分片划分</p>
    <p>LL-HLS将大的分片且分为一个个较小的分片, 这种切分方式不是简单的将源分片等分, 而是结合fMP4封装和#EXT-X-MAP规则, 将整视频的头部和内容分开, 而且内容源被划分的很细, 例如原来一个分片6s左右, 可能被切分为30个200ms的fMP4分片, 这些分片使用#EXT-X-PART来标注.</p>
    <p>增量更新</p>
    <p>不发送完整的播放列表，而是发送播放列表的增量（默认的播放列表被保存，然后只在出现时发送增量，而不是发送完整的播放列表）</p>
    <p>服务器阻塞，消除轮询</p>
    <p>服务器的责任是保留请求（阻塞），直到包含新片段的播放列表版本可用。阻断播放列表的重新加载消除了轮询</p>
    <p>预加载支持</p>
    <p>通过EXT-X-PRELOAD-HINT标签，来声明即将产生的片段。客户端可以提前发起请求，当该片段生成时立即回复给客户端。</p>
    </blockquote>
    <h3 id="3-mse">3. MSE</h3>
    <p>MSE（Media Source Extensions）媒体源扩展 API 提供了实现无插件且基于 Web 的流媒体的功能。使用 MSE，媒体串流能够通过 JavaScript 创建， 并且能通过使用<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>元素进行播放。</p>
    <h3 id="4-webrtc">4. WebRTC</h3>
    <p>WebRTC (Web Real-Time Communications)，由Google发起的实时通讯解决方案，其中包含视频音频采集，编解码，数据传输，音视频展示等功能。</p>
    <p>参考资料：<a href="https://zhuanlan.zhihu.com/p/86751078">https://zhuanlan.zhihu.com/p/86751078</a></p>
    <h2 id="五-常见问题">五. 常见问题</h2>
    <ol>
    <li><p>Linux环境无法播放WebRTC</p>
    <p>WebRTC端口被防火墙拦截，需要进行如下操作：</p>
    <ul>
    <li>修改<code>config.json</code>，设置</li>
    </ul>
    <pre><code class="language-json"> &quot;webrtc_port_max&quot;: 61000,
     &quot;webrtc_port_min&quot;: 60000
    </code></pre>
    <ul>
    <li>服务器开放端口，在终端执行命令</li>
    </ul>
    <pre><code class="language-shell"> firewall-cmd --add-port=60000-61000/udp --permanent
     firewall-cmd --reload
    </code></pre>
    </li>
    </ol>
  </div>
</div>
{{template "foot.tmpl" .}}
